# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: spring-app
---
# PostgreSQL ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: spring-app
data:
  POSTGRES_DB: mydatabase
  POSTGRES_USER: myuser
---
# PostgreSQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: spring-app
type: Opaque
data:
  POSTGRES_PASSWORD: c2VjcmV0 # secret (base64 encoded)
---
# PostgreSQL PersistentVolumeClaim (Using Minikube default storage)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: spring-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: spring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: spring-app
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: spring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: spring-app
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Zookeeper Deployment (Required for Kafka)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: spring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: bitnami/zookeeper:3.9
          ports:
            - containerPort: 2181
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
# Zookeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: spring-app
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
  type: ClusterIP
---
# Kafka Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: spring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:3.6
          ports:
            - containerPort: 9092
            - containerPort: 9093
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-service:2181"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-service:9092,PLAINTEXT_HOST://localhost:9093"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
---
# Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: spring-app
spec:
  selector:
    app: kafka
  ports:
    - port: 9092
      targetPort: 9092
      name: plaintext
    - port: 9093
      targetPort: 9093
      name: plaintext-host
  type: ClusterIP
---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: spring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          env:
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "false"
            - name: ES_JAVA_OPTS
              value: "-Xms512m -Xmx512m"
            - name: http.cors.enabled
              value: "true"
            - name: http.cors.allow-origin
              value: "\\*"
          volumeMounts:
            - name: elasticsearch-data
              mountPath: /usr/share/elasticsearch/data
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
      volumes:
        - name: elasticsearch-data
          emptyDir: {}
---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: spring-app
spec:
  selector:
    app: elasticsearch
  ports:
    - name: http
      port: 9200
      targetPort: 9200
    - name: transport
      port: 9300
      targetPort: 9300
  type: ClusterIP
---
# Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: spring-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:8.11.0
          ports:
            - containerPort: 5601
          env:
            - name: ELASTICSEARCH_HOSTS
              value: http://elasticsearch:9200
            - name: xpack.security.enabled
              value: "false"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
---
# Kibana Service
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: spring-app
spec:
  selector:
    app: kibana
  ports:
    - port: 5601
      targetPort: 5601
  type: ClusterIP
---
# Spring Boot App ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: spring-app-config
  namespace: spring-app
data:
  application.yml: |
    server:
      port: 8080
    
    spring:
      datasource:
        url: jdbc:postgresql://postgres-service:5432/mydatabase
        username: myuser
        password: secret
        driver-class-name: org.postgresql.Driver
    
      jpa:
        hibernate:
          ddl-auto: update
        show-sql: true
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQLDialect
    
      data:
        redis:
          host: redis-service
          port: 6379
    
      kafka:
        bootstrap-servers: kafka-service:9092
        consumer:
          group-id: user-consumer-group
          auto-offset-reset: earliest
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          properties:
            spring.json.trusted.packages: "*"
            spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics
      endpoint:
        health:
          show-details: always
    
    logging:
      level:
        com.edstem: DEBUG
        org.springframework.cache: DEBUG
        org.springframework.kafka: INFO
---
# Spring Boot App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-app
  namespace: spring-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: spring-app
  template:
    metadata:
      labels:
        app: spring-app
    spec:
      containers:
        - name: spring-app
          image: rubenmanoj/product-catalog-app:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "kubernetes"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres-service:5432/mydatabase"
            - name: SPRING_DATASOURCE_USERNAME
              value: "myuser"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "secret"
            - name: SPRING_REDIS_HOST
              value: "redis-service"
            - name: SPRING_REDIS_PORT
              value: "6379"
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-consumer-group"
            - name: SPRING_ELASTICSEARCH_URIS
              value: "http://elasticsearch:9200"
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
      volumes:
        - name: config-volume
          configMap:
            name: spring-app-config
---
# Spring Boot App Service (NodePort for Minikube)
apiVersion: v1
kind: Service
metadata:
  name: spring-app-service
  namespace: spring-app
spec:
  selector:
    app: spring-app
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30080
  type: NodePort
---
# Ingress for Minikube (requires ingress addon)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-app-ingress
  namespace: spring-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: spring-app.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spring-app-service
                port:
                  number: 80